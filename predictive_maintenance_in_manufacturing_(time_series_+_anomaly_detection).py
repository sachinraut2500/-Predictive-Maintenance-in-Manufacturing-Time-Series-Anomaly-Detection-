# -*- coding: utf-8 -*-
"""Predictive Maintenance in Manufacturing (Time Series + Anomaly Detection).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, RepeatVector, TimeDistributed, Dense

def generate_synthetic_sensor_data(n_samples=1000, anomaly_start=800):
    np.random.seed(42)
    normal = np.sin(np.linspace(0, 50, n_samples)) + np.random.normal(0, 0.1, n_samples)
    data = normal.copy()
    data[anomaly_start:] += np.random.normal(2, 0.5, n_samples - anomaly_start)  # simulate failure
    return pd.DataFrame({'vibration': data})

def create_sequences(data, seq_len):
    X = []
    for i in range(len(data) - seq_len):
        X.append(data[i:i+seq_len])
    return np.array(X)

def build_model(seq_len, n_features):
    input_layer = Input(shape=(seq_len, n_features))
    encoded = LSTM(64, activation='relu')(input_layer)
    decoded = RepeatVector(seq_len)(encoded)
    decoded = LSTM(64, activation='relu', return_sequences=True)(decoded)
    decoded = TimeDistributed(Dense(n_features))(decoded)

    autoencoder = Model(inputs=input_layer, outputs=decoded)
    autoencoder.compile(optimizer='adam', loss='mse')
    return autoencoder

def main():
    df = generate_synthetic_sensor_data()
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(df)

    SEQ_LEN = 50
    X = create_sequences(data_scaled, SEQ_LEN)

    X_train = X[:700]
    X_test = X[700:]

    model = build_model(SEQ_LEN, 1)
    model.fit(X_train, X_train, epochs=30, batch_size=32, validation_split=0.1, verbose=0)

    X_pred = model.predict(X_test)
    mse = np.mean(np.power(X_test - X_pred, 2), axis=(1, 2))

    threshold = np.percentile(mse, 95)

    plt.figure(figsize=(10, 5))
    plt.plot(mse, label='Reconstruction Error')
    plt.axhline(y=threshold, color='r', linestyle='--', label='Threshold')
    plt.title("Anomaly Detection in Predictive Maintenance")
    plt.legend()
    plt.show()

    print(f"Anomalies detected: {(mse > threshold).sum()} out of {len(mse)} sequences")

if __name__ == "__main__":
    main()